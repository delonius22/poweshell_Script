// Start with process events, looking for calculator processes spawned by PowerShell
#event_simpleName=ProcessRollup2 
| filter FileName="calc.exe" AND ParentBaseFileName=/powershell\.exe|pwsh\.exe/i

// Store key information about this process
| alter 
    TargetProcessId=ProcessId,
    PowerShellParentId=ParentProcessId,
    ExecutionTime=_time

// Look exclusively at relevant PowerShell properties using the stored parent ID
| alter ParentProcessId=PowerShellParentId
| unique ParentProcessId

// Stream in PowerShell command line data to examine for suspicious patterns
| lookup 
    processId, CommandLine
    from
    (
      #event_simpleName=ProcessRollup2
      | filter FileName=/powershell\.exe|pwsh\.exe/i
      | alter processId=ProcessId
    )
    where
    processId=ParentProcessId

// Apply behavioral detection filters based on command patterns
| filter (
    // Encryption and cryptography related functions
    CommandLine=/Encrypt|Decrypt|AES|Cryptography/i AND
    
    // Secure string handling for password validation
    CommandLine=/SecureString|Marshal|BSTR|PtrToString/i AND
    
    // Assembly loading and reflection
    CommandLine=/Assembly|GetMethod|Invoke|reflection/i AND
    
    // Code compilation indicators
    CommandLine=/CodeDom|CSharpCodeProvider|CompileAssembly/i
)

// Use other event types to enhance detection without joins
| alter PowershellProcess=ParentProcessId
| unique PowershellProcess

// Check for desktop files with our pattern using lookup instead of join
| alter has_desktop_binary=false
| lookup
    has_desktop_binary=true
    from 
    (
      #event_simpleName=FileWritten
      | filter TargetFileName=/Desktop.*thundr_.*\.(bin|dll)$/i
      | alter ProcessId=ProcessId
    )
    where
    ProcessId=PowershellProcess

// Check for temporary DLL creation using lookup
| alter has_temp_dll=false
| lookup
    has_temp_dll=true
    from
    (
      #event_simpleName=FileWritten
      | filter TargetFileName=/Temp.*\.dll$/i
      | alter ProcessId=ProcessId
    )
    where
    ProcessId=PowershellProcess

// Look for memory allocation as final confirmation
| alter has_exec_memory=false
| lookup
    has_exec_memory=true
    from
    (
      #event_simpleName=MemoryAllocationSubmitted
      | filter Protect=0x40 // PAGE_EXECUTE_READWRITE
      | alter ContextProcessId=ContextProcessId
    )
    where
    ContextProcessId=PowershellProcess

// Only alert on events matching our full behavioral pattern
| filter has_desktop_binary=true AND has_temp_dll=true AND has_exec_memory=true

// Group by host and day for efficient reporting over a year of data
| groupBy([ComputerName, format_time(ExecutionTime, "yyyy-MM-dd")])
  {
    // Collect only essential details
    collect([
      CommandLine,
      TargetProcessId,
      PowershellProcess,
      ExecutionTime
    ]) as ActivityDetails
    
    min(ExecutionTime) as FirstSeen
    count() as EventCount
  }

// Final formatting
| eval AlertTitle = "Hostname-Encrypted DLL Technique Detected"
| eval Description = "PowerShell script creating hostname-encrypted DLL to launch calculator process detected"

| sort by FirstSeen asc
| project 
    ComputerName,
    FirstSeen, 
    EventCount,
    AlertTitle,
    Description,
    ActivityDetails