# thundr_encrypted_loader.ps1
# This script creates a C# DLL that launches calculator, encrypts it using PBKDF2 with
# the hostname as the password, saves it to desktop, and then loads it back from the encrypted file.
# All files are stored on the desktop with the "thundr_" prefix.

# Password protection
$correctPassword = "passw0rd111"
$inputPassword = Read-Host "Please enter the password to continue" -AsSecureString
$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($inputPassword)
$plainPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)
[System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR($BSTR)  # Clean up the pointer

if ($plainPassword -ne $correctPassword) {
    Write-Host "Incorrect password. Exiting script." -ForegroundColor Red
    exit
}

Write-Host "Password correct. Proceeding with execution..." -ForegroundColor Green

# Get hostname for use as the encryption password
$hostname = $env:COMPUTERNAME
Write-Host "Using hostname '$hostname' as encryption password seed"

# Define the paths - all on desktop
$desktopPath = [Environment]::GetFolderPath("Desktop")
$csharpFilePath = Join-Path -Path $desktopPath -ChildPath "thundr_calculator.cs"
$tempDllPath = Join-Path -Path $desktopPath -ChildPath "thundr_unencrypted.dll"
$encryptedDllPath = Join-Path -Path $desktopPath -ChildPath "thundr_encrypted.bin"

# Function to create a secure encryption key using PBKDF2
function Get-PBKDF2Key {
    param (
        [string]$Password,
        [byte[]]$Salt = $null,
        [int]$Iterations = 10000,
        [int]$KeySize = 32  # 256 bits for AES-256
    )
    
    # Generate a random salt if none provided
    if ($null -eq $Salt) {
        $Salt = New-Object byte[] 16
        $rng = [System.Security.Cryptography.RandomNumberGenerator]::Create()
        $rng.GetBytes($Salt)
        $rng.Dispose()
    }
    
    # Use Rfc2898DeriveBytes for PBKDF2 implementation
    $pbkdf2 = New-Object System.Security.Cryptography.Rfc2898DeriveBytes($Password, $Salt, $Iterations)
    $key = $pbkdf2.GetBytes($KeySize)
    $pbkdf2.Dispose()
    
    # Return both the key and salt
    return @{
        Key = $key
        Salt = $Salt
    }
}

# Function to encrypt a byte array using PBKDF2 and AES
function Encrypt-BytesPBKDF2 {
    param (
        [byte[]]$Data,
        [string]$Password,
        [byte[]]$Salt = $null,
        [int]$Iterations = 10000
    )
    
    # Derive the key using PBKDF2
    $keyData = Get-PBKDF2Key -Password $Password -Salt $Salt -Iterations $Iterations
    $key = $keyData.Key
    $salt = $keyData.Salt
    
    # Create AES encryption object
    $aes = [System.Security.Cryptography.Aes]::Create()
    $aes.Key = $key
    $aes.GenerateIV()
    $iv = $aes.IV
    
    # Create memory streams and crypto stream for encryption
    $msEncrypt = New-Object System.IO.MemoryStream
    
    # Structure of the output: [salt length (4 bytes)][salt][iv length (4 bytes)][iv][encrypted data]
    # Store salt length and salt
    $saltLengthBytes = [System.BitConverter]::GetBytes($salt.Length)
    $msEncrypt.Write($saltLengthBytes, 0, 4)
    $msEncrypt.Write($salt, 0, $salt.Length)
    
    # Store IV length and IV
    $ivLengthBytes = [System.BitConverter]::GetBytes($iv.Length)
    $msEncrypt.Write($ivLengthBytes, 0, 4)
    $msEncrypt.Write($iv, 0, $iv.Length)
    
    # Create encryptor and crypto stream
    $encryptor = $aes.CreateEncryptor()
    $csEncrypt = New-Object System.Security.Cryptography.CryptoStream $msEncrypt, $encryptor, "Write"
    
    # Write the data to the crypto stream
    $csEncrypt.Write($Data, 0, $Data.Length)
    $csEncrypt.FlushFinalBlock()
    
    # Get the encrypted data
    $encryptedData = $msEncrypt.ToArray()
    
    # Clean up resources
    $csEncrypt.Close()
    $msEncrypt.Close()
    $aes.Dispose()
    
    return $encryptedData
}

# Function to decrypt a byte array encrypted with PBKDF2 and AES
function Decrypt-BytesPBKDF2 {
    param (
        [byte[]]$EncryptedData,
        [string]$Password,
        [int]$Iterations = 10000
    )
    
    try {
        # Create a memory stream to read the encrypted data
        $ms = New-Object System.IO.MemoryStream($EncryptedData)
        
        # Read the salt length
        $saltLengthBytes = New-Object byte[] 4
        $ms.Read($saltLengthBytes, 0, 4) | Out-Null
        $saltLength = [System.BitConverter]::ToInt32($saltLengthBytes, 0)
        
        # Read the salt
        $salt = New-Object byte[] $saltLength
        $ms.Read($salt, 0, $saltLength) | Out-Null
        
        # Read the IV length
        $ivLengthBytes = New-Object byte[] 4
        $ms.Read($ivLengthBytes, 0, 4) | Out-Null
        $ivLength = [System.BitConverter]::ToInt32($ivLengthBytes, 0)
        
        # Read the IV
        $iv = New-Object byte[] $ivLength
        $ms.Read($iv, 0, $ivLength) | Out-Null
        
        # Derive the key using PBKDF2 with the same salt
        $keyData = Get-PBKDF2Key -Password $Password -Salt $salt -Iterations $Iterations
        $key = $keyData.Key
        
        # Read the encrypted content
        $encryptedContent = New-Object byte[] ($EncryptedData.Length - 4 - $saltLength - 4 - $ivLength)
        $ms.Read($encryptedContent, 0, $encryptedContent.Length) | Out-Null
        $ms.Close()
        
        # Create AES decryption object
        $aes = [System.Security.Cryptography.Aes]::Create()
        $aes.Key = $key
        $aes.IV = $iv
        
        # Create memory stream and crypto stream for decryption
        $msDecrypt = New-Object System.IO.MemoryStream($encryptedContent)
        $decryptor = $aes.CreateDecryptor()
        $csDecrypt = New-Object System.Security.Cryptography.CryptoStream $msDecrypt, $decryptor, "Read"
        
        # Create output memory stream
        $msOutput = New-Object System.IO.MemoryStream
        
        # Buffer for reading data
        $buffer = New-Object byte[] 4096
        $bytesRead = 0
        
        # Read decrypted data in chunks
        do {
            $bytesRead = $csDecrypt.Read($buffer, 0, $buffer.Length)
            if ($bytesRead -gt 0) {
                $msOutput.Write($buffer, 0, $bytesRead)
            }
        } while ($bytesRead -gt 0)
        
        # Get the decrypted data
        $decryptedData = $msOutput.ToArray()
        
        # Clean up resources
        $csDecrypt.Close()
        $msDecrypt.Close()
        $msOutput.Close()
        $aes.Dispose()
        
        return $decryptedData
    }
    catch {
        Write-Error "Decryption error: $_"
        throw
    }
}

# C# code for the DLL that will launch calculator - removed the $ string interpolation
$csharpCode = @'
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

public class ThundrCalculator
{
    [DllImport("kernel32.dll")]
    public static extern IntPtr GetConsoleWindow();

    [DllImport("user32.dll")]
    public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
    
    private const int SW_HIDE = 0;
    
    public static void LaunchCalculator()
    {
        try
        {
            // Hide console window if it exists
            var handle = GetConsoleWindow();
            if (handle != IntPtr.Zero)
            {
                ShowWindow(handle, SW_HIDE);
            }

            // Launch calculator
            Process.Start("calc.exe");
            
            // Sleep for 10 seconds
            Thread.Sleep(10000);
            
            // The method completes and assembly will be eligible for unloading
            // when no longer referenced
        }
        catch (Exception ex)
        {
            // Using string concatenation instead of interpolation to avoid $ character
            Console.WriteLine("Error: " + ex.Message);
        }
    }
}
'@

# Save C# code to desktop
Write-Host "Writing C# code to: $csharpFilePath" -ForegroundColor Cyan
[System.IO.File]::WriteAllText($csharpFilePath, $csharpCode)

try {
    # Ensure System.CodeDom is available (different approach to avoid Add-Type errors)
    try {
        $csProvider = New-Object Microsoft.CSharp.CSharpCodeProvider
        Write-Host "Successfully loaded CSharp compiler services" -ForegroundColor Green
    } catch {
        Write-Host "Failed to load CSharp compiler. Trying to load assembly directly..." -ForegroundColor Yellow
        
        # Alternative approach to load assembly manually if Add-Type fails
        $systemCodeDomPath = [System.IO.Path]::Combine([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory(), "System.CodeDom.dll")
        if (Test-Path $systemCodeDomPath) {
            [System.Reflection.Assembly]::LoadFile($systemCodeDomPath) | Out-Null
            Write-Host "Loaded System.CodeDom from: $systemCodeDomPath" -ForegroundColor Green
        } else {
            $mscorlibPath = [System.Reflection.Assembly]::Load("mscorlib").Location
            $runtimePath = [System.IO.Path]::GetDirectoryName($mscorlibPath)
            Write-Host "Runtime path: $runtimePath" -ForegroundColor Cyan
            $codeDomCandidates = Get-ChildItem -Path $runtimePath -Filter "System.CodeDom*.dll" -Recurse -ErrorAction SilentlyContinue
            if ($codeDomCandidates.Count -gt 0) {
                [System.Reflection.Assembly]::LoadFile($codeDomCandidates[0].FullName) | Out-Null
                Write-Host "Loaded alternative System.CodeDom from: $($codeDomCandidates[0].FullName)" -ForegroundColor Green
            } else {
                Write-Error "Unable to find System.CodeDom.dll. Cannot compile C# code."
                exit 1
            }
        }
        
        $csProvider = New-Object Microsoft.CSharp.CSharpCodeProvider
    }
    
    # Configure the compiler - with explicit assembly references to avoid duplicates
    $params = New-Object System.CodeDom.Compiler.CompilerParameters
    $params.GenerateInMemory = $false
    $params.OutputAssembly = $tempDllPath
    $params.GenerateExecutable = $false
    $params.TreatWarningsAsErrors = $false
    $params.WarningLevel = 4
    
    # Add only the necessary assemblies, explicitly named to avoid duplicates
    $params.ReferencedAssemblies.Add("System.dll") | Out-Null
    $params.ReferencedAssemblies.Add("System.Core.dll") | Out-Null
    
    # Compile the code
    Write-Host "Compiling C# code to DLL at: $tempDllPath" -ForegroundColor Cyan
    $results = $csProvider.CompileAssemblyFromSource($params, $csharpCode)
    
    # Check for compilation errors
    if ($results.Errors.Count -gt 0) {
        Write-Host "Compilation errors:" -ForegroundColor Red
        foreach ($error in $results.Errors) {
            Write-Host "  $error" -ForegroundColor Red
        }
        exit 1
    }
    
    Write-Host "Code compiled successfully to: $tempDllPath" -ForegroundColor Green
    
    # Read the compiled DLL as bytes
    Write-Host "Reading compiled DLL bytes..." -ForegroundColor Cyan
    $dllBytes = [System.IO.File]::ReadAllBytes($tempDllPath)
    Write-Host "DLL size: $($dllBytes.Length) bytes" -ForegroundColor Cyan
    
    # Verify DLL has valid PE header
    if ($dllBytes[0] -eq 0x4D -and $dllBytes[1] -eq 0x5A) {
        Write-Host "DLL has valid PE header" -ForegroundColor Green
    } else {
        Write-Host "WARNING: DLL does not have valid PE header" -ForegroundColor Red
    }
    
    # Encrypt the DLL using PBKDF2 with hostname as password
    Write-Host "Encrypting the DLL with PBKDF2 using hostname as password..." -ForegroundColor Cyan
    $encryptedDllBytes = Encrypt-BytesPBKDF2 -Data $dllBytes -Password $hostname
    Write-Host "Encrypted size: $($encryptedDllBytes.Length) bytes" -ForegroundColor Cyan
    
    # Save the encrypted DLL to the desktop
    Write-Host "Writing encrypted DLL to: $encryptedDllPath" -ForegroundColor Cyan
    [System.IO.File]::WriteAllBytes($encryptedDllPath, $encryptedDllBytes)
    Write-Host "Encrypted DLL created successfully at: $encryptedDllPath" -ForegroundColor Green
    
    # Now decrypt and load the DLL
    Write-Host "Reading encrypted DLL from disk..." -ForegroundColor Cyan
    $fileEncryptedBytes = [System.IO.File]::ReadAllBytes($encryptedDllPath)
    
    Write-Host "Decrypting DLL using hostname..." -ForegroundColor Cyan
    $decryptedDllBytes = Decrypt-BytesPBKDF2 -EncryptedData $fileEncryptedBytes -Password $hostname
    Write-Host "Decrypted size: $($decryptedDllBytes.Length) bytes" -ForegroundColor Cyan
    
    # Verify decrypted bytes have valid PE header
    if ($decryptedDllBytes[0] -eq 0x4D -and $decryptedDllBytes[1] -eq 0x5A) {
        Write-Host "Decrypted DLL has valid PE header" -ForegroundColor Green
    } else {
        Write-Host "WARNING: Decrypted DLL does not have valid PE header" -ForegroundColor Red
        Write-Host "First 20 bytes: $($decryptedDllBytes[0..19] -join ', ')" -ForegroundColor Yellow
        throw "Decryption failed - invalid PE file"
    }
    
    # Load the decrypted assembly
    Write-Host "Loading decrypted assembly..." -ForegroundColor Cyan
    $assemblyLoadContext = [System.Reflection.Assembly]::Load($decryptedDllBytes)
    
    if ($null -eq $assemblyLoadContext) {
        throw "Assembly load failed - returned null"
    }
    
    Write-Host "Assembly loaded successfully: $($assemblyLoadContext.FullName)" -ForegroundColor Green
    
    # Get available types in the assembly for debugging
    $availableTypes = $assemblyLoadContext.GetTypes()
    Write-Host "Types in the assembly:" -ForegroundColor Cyan
    $availableTypes | ForEach-Object { Write-Host "  - $($_.FullName)" -ForegroundColor Cyan }
    
    # Get the ThundrCalculator type
    $calculatorType = $assemblyLoadContext.GetType("ThundrCalculator")
    
    if ($null -eq $calculatorType) {
        throw "Could not find ThundrCalculator type in the assembly"
    }
    
    Write-Host "Found ThundrCalculator type" -ForegroundColor Green
    
    # List available methods on the type
    $availableMethods = $calculatorType.GetMethods()
    Write-Host "Methods available:" -ForegroundColor Cyan
    $availableMethods | ForEach-Object { Write-Host "  - $($_.Name)" -ForegroundColor Cyan }
    
    # Get the LaunchCalculator method
    $launchMethod = $calculatorType.GetMethod("LaunchCalculator")
    
    if ($null -eq $launchMethod) {
        throw "Could not find LaunchCalculator method"
    }
    
    Write-Host "Found LaunchCalculator method" -ForegroundColor Green
    
    # Invoke the LaunchCalculator method
    Write-Host "Invoking LaunchCalculator method..." -ForegroundColor Cyan
    $launchMethod.Invoke($null, $null)
    
    Write-Host "Calculator launched. DLL will automatically unload after 10 seconds." -ForegroundColor Green
    Write-Host "Files created on desktop:" -ForegroundColor Cyan
    Write-Host "  - $csharpFilePath (C# source code)" -ForegroundColor Cyan
    Write-Host "  - $tempDllPath (Unencrypted DLL)" -ForegroundColor Cyan
    Write-Host "  - $encryptedDllPath (Encrypted DLL)" -ForegroundColor Cyan
} catch {
    Write-Host "An error occurred: $_" -ForegroundColor Red
    Write-Host "Stack trace: $($_.Exception.StackTrace)" -ForegroundColor Red
    
    # Additional diagnostic info if needed
    if ($null -ne $results -and $results.Errors.Count -gt 0) {
        Write-Host "Compilation Errors:" -ForegroundColor Red
        foreach ($error in $results.Errors) {
            Write-Host "  $error" -ForegroundColor Red
        }
    }
}